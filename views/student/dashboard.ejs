<%- include('../partials/_header') %>
<body class="main-layout inner_posituong" style="background-color:#1E1D42;" >
  <%- include('../partials/_navbar') %>
  
  <div class="container mt-5">
    <h2 class="text-white font-weight-bold display-8">Öğrenci Dashboard</h2>
    
    <!-- Active Session Information -->
    <% if (activeSession) { %>
      <div class="card mt-4 " style="background-color: #ADD8E6">
        <div class="card-body">
          <h4 class="card-title text-black">Aktif Oturum</h4>
          <p class="card-text">
            <strong>Bilgisayar:</strong> <%= activeSession.computer.name %><br>
            <strong>Laboratuvar:</strong> <%= activeSession.computer?.lab?.name %><br>
            <strong>Operator:</strong> <%= activeSession.operator.name %> <%= activeSession.operator.lastname %><br>
            <strong>Başlangıç:</strong> <%= formatDate(activeSession.startTime) %>
          </p>
        </div>
      </div>
    <% } %>

    <!-- Today's Sessions -->
    <div class="card mt-4" style="background-color: #ADD8E6">
      <div class="card-header text-white">
        <h5 class="card-title mb-0 text-black ">Bugünün Oturumları</h5>
      </div>
      <div class="card-body">
        <table class="table">
          <thead>
            <tr>
              <th style="background-color: #ADD8E6">Bilgisayar</th>
              <th style="background-color: #ADD8E6">Laboratuvar</th>
              <th style="background-color: #ADD8E6">Operator</th>
              <th style="background-color: #ADD8E6">Başlangıç</th>
              <th style="background-color: #ADD8E6">Bitiş</th>
              <th style="background-color: #ADD8E6">Süre</th>
            </tr>
          </thead>
          <% if(todaySessions && todaySessions.length > 0) { %>
            <tbody>
              <%
                const activeSessions = todaySessions.filter(s => !s.endTime);
                const finishedSessions = todaySessions.filter(s => s.endTime);
                const sortedSessions = [...activeSessions, ...finishedSessions];
    
                sortedSessions.forEach(session => {
              %>
                <tr>
                  <td style="background-color: #ADD8E6"><%= session.computer?.name || 'Bilinmiyor' %></td>
                  <td style="background-color: #ADD8E6"><%= session.computer?.lab?.name || 'Bilinmiyor' %></td>
                  <td style="background-color: #ADD8E6"><%= session.operator?.name %> <%= session.operator?.lastname %></td>
                  <td style="background-color: #ADD8E6"><%= formatTime(session.startTime) %></td>
                  <td style="background-color: #ADD8E6"><%= session.endTime ? formatTime(session.endTime) : 'Devam ediyor' %></td>
                  <td style="background-color: #ADD8E6">
                    <% if (!session.endTime) { %>
                      <i class="fas fa-hourglass-half text-warning"></i>
                    <% } else { %>
                      <i class="fas fa-stopwatch text-success"></i>
                    <% } %>
                    <%= formatDuration(new Date(session.endTime || new Date()) - new Date(session.startTime)) %>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          <% } else { %>
            <tbody>
              <tr>
                <td colspan="6" class="text-center" style="background-color: #f8d7da; color: #721c24;">
                  Bugün herhangi bir oturumunuz bulunmamaktadır.
                </td>
              </tr>
            </tbody>
          <% } %>
        </table>
      </div>
    </div>

  
  </div>

  <%- include('../partials/_footer') %>

  <script>
    // Süre formatlamak için yardımcı fonksiyon
    function formatDuration(milliseconds) {
      const hours = Math.floor(milliseconds / (1000 * 60 * 60));
      const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
      
      if (hours === 0) {
        return `${minutes} dakika`;
      }
      return `${hours} saat ${minutes} dakika`;
    }

    // Tarih formatlamak için yardımcı fonksiyon
    function formatDate(date) {
      const options = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      };
      return new Date(date).toLocaleDateString('tr-TR', options);
    }

    // Aktif oturum süresini güncelle
    function updateSessionDuration() {
      const sessionStart = new Date('<%= user.currentComputer ? user.labUsageHistory.find(h => !h.endTime).startTime : null %>');
      if (sessionStart) {
        const duration = new Date() - sessionStart;
        const hours = Math.floor(duration / (1000 * 60 * 60));
        const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((duration % (1000 * 60)) / 1000);
        
        let durationText = '';
        if (hours > 0) durationText += `${hours} saat `;
        if (minutes > 0) durationText += `${minutes} dakika `;
        durationText += `${seconds} saniye`;
        
        document.getElementById('sessionDuration').textContent = durationText;
      }
    }

    if (document.getElementById('sessionDuration')) {
      updateSessionDuration();
      setInterval(updateSessionDuration, 1000);
    }
  </script>

  <style>
    .badge {
      padding: 8px 12px;
      font-size: 0.85rem;
      font-weight: 500;
      letter-spacing: 0.3px;
      border-radius: 20px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      transition: all 0.3s ease;
    }

    .badge:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .badge i {
      margin-right: 5px;
    }

    .bg-gradient {
      background-size: 200% auto;
      animation: gradient 2s ease infinite;
    }

    @keyframes gradient {
      0% {
        background-position: 0% 50%;
      }
      50% {
        background-position: 100% 50%;
      }
      100% {
        background-position: 0% 50%;
      }
    }

    /* Devam eden oturum için animasyonlu arka plan */
    .badge.bg-gradient {
      color: white;
      text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    /* Tamamlanan oturum için yumuşak geçişli arka plan */
    .badge:not(.bg-gradient) {
      transition: background 0.3s ease;
    }
  </style>
</body> 